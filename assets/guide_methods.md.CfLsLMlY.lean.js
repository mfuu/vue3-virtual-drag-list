import{_ as o,c as t,a5 as a,o as l}from"./chunks/framework.Tst34yPz.js";const p=JSON.parse('{"title":"Methods","description":"","frontmatter":{},"headers":[],"relativePath":"guide/methods.md","filePath":"guide/methods.md"}'),r={name:"guide/methods.md"};function i(s,e,c,d,h,n){return l(),t("div",null,e[0]||(e[0]=[a('<h1 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h1><h2 id="getsize-key" tabindex="-1"><code>getSize(key)</code> <a class="header-anchor" href="#getsize-key" aria-label="Permalink to &quot;`getSize(key)`&quot;">​</a></h2><p>Get the size of the current item by unique key value</p><h2 id="getoffset" tabindex="-1"><code>getOffset()</code> <a class="header-anchor" href="#getoffset" aria-label="Permalink to &quot;`getOffset()`&quot;">​</a></h2><p>Get the current scroll height</p><h2 id="getclientsize" tabindex="-1"><code>getClientSize()</code> <a class="header-anchor" href="#getclientsize" aria-label="Permalink to &quot;`getClientSize()`&quot;">​</a></h2><p>Get wrapper element client viewport size (width or height)</p><h2 id="getscrollsize" tabindex="-1"><code>getScrollSize()</code> <a class="header-anchor" href="#getscrollsize" aria-label="Permalink to &quot;`getScrollSize()`&quot;">​</a></h2><p>Get all scroll size (scrollHeight or scrollWidth)</p><h2 id="scrolltotop" tabindex="-1"><code>scrollToTop()</code> <a class="header-anchor" href="#scrolltotop" aria-label="Permalink to &quot;`scrollToTop()`&quot;">​</a></h2><p>Scroll to top of list</p><h2 id="scrolltobottom" tabindex="-1"><code>scrollToBottom()</code> <a class="header-anchor" href="#scrolltobottom" aria-label="Permalink to &quot;`scrollToBottom()`&quot;">​</a></h2><p>Scroll to bottom of list</p><h2 id="scrolltokey-key" tabindex="-1"><code>scrollToKey(key)</code> <a class="header-anchor" href="#scrolltokey-key" aria-label="Permalink to &quot;`scrollToKey(key)`&quot;">​</a></h2><p>Scroll to the specified <code>data-key</code> position</p><h2 id="scrolltoindex-index-number" tabindex="-1"><code>scrollToIndex(index: number)</code> <a class="header-anchor" href="#scrolltoindex-index-number" aria-label="Permalink to &quot;`scrollToIndex(index: number)`&quot;">​</a></h2><p>Scroll to the specified <code>index</code> position</p><h2 id="scrolltooffset-offset-number" tabindex="-1"><code>scrollToOffset(offset: number)</code> <a class="header-anchor" href="#scrolltooffset-offset-number" aria-label="Permalink to &quot;`scrollToOffset(offset: number)`&quot;">​</a></h2><p>Scroll to the specified offset</p>',19)]))}const u=o(r,[["render",i]]);export{p as __pageData,u as default};
